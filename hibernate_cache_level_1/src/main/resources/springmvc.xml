<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	 xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"  
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
    
    

     <!-- 
     <mvc:resources location="/script/" mapping="/script/**"/>   
     <mvc:resources location="/style/" mapping="/style/**"/> 
      -->
	
	 <!-- 配置自定扫描的包  扫描dao包  将带有@Repository的类纳入spring ioc管理 并实例化 -->
	<context:component-scan base-package="hibernate.hibernate_cache_level_1">
		<context:include-filter type="regex" expression=".dao.*"/>
		<context:include-filter type="regex" expression=".service.*"/>
		<context:include-filter type="regex" expression=".utils.*"/>
		<context:include-filter type="regex" expression=".controller.*"/>
	</context:component-scan>
	
     <!-- 
	配置信息可以参考 hibernate-release-5.2.2.Final\hibernate-release-5.2.2.Final\project\etc\hibernate.properties,但是key对应的value时
	有时没有更新,需要拷贝jar包的class的最新名称来替换  如c3p0配置文件 hibernate.properties给出的 hibernate.connection.provider_class 对应的是
	org.hibernate.connection.C3P0ConnectionProvider，但是hibernate5.2.2这个版本中并没有这个类,而是
	org.hibernate.c3p0.internal.C3P0ConnectionProvider
 -->	
	 <!-- c3p0数据源   此处ComboPooledDataSource数据源来源于c3p0-0.9.2.1.jar-->   
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"   
            destroy-method="close">  
        <property name="driverClass" value="com.mysql.jdbc.Driver" />
        <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/test" />
        <property name="user" value="root" />
        <property name="password" value="123456" />
        <property name="initialPoolSize" value="1" />  
        <property name="minPoolSize" value="0" />  
        <property name="maxPoolSize" value="10" />  
        <property name="acquireIncrement" value="5" />  
        <property name="maxIdleTime" value="10" />  
        <property name="maxStatements" value="0" />  
    </bean>
    
    
    <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="showSql" value="true"/>
        <property name="generateDdl" value="false"/>
        <property name="database" value="MYSQL"/>
    </bean>
    <!--指定实现JPA的适配器-->  
    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">  
        <property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" />  
    </bean>  
    <!-- JPA实体管理工厂的配置 -->  
     <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="hibernate.hibernate_cache_level_1.entity" /><!--待扫描的实体类包，不再需要persistence.xml了-->  
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>
         <property name="jpaProperties">  
            <props>  
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>  
                <prop key="hibernate.show_sql">true</prop>  
                <prop key="hibernate.hbm2ddl.auto">update</prop>  
            </props>  
        </property>  
    </bean>
    
    <!-- Jpa 事务配置 -->  
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">  
        <property name="entityManagerFactory" ref="entityManagerFactory"/>  
    </bean>  
    
    <!-- 使用annotation定义事务 -->  
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />  
</beans>
<!-- 参考  http://www.cnblogs.com/leiOOlei/p/3727859.html -->
<!-- 
hibernate jpa 事务配置参考
http://www.mamicode.com/info-detail-110033.html
 -->